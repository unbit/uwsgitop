#!/usr/bin/python

import socket
import simplejson as json
import curses
import time
import atexit
import sys
import traceback
import argparse
from os.path import exists

parser = argparse.ArgumentParser(description='The uWSGI top-like tool')
parser = argparse.ArgumentParser(add_help=True)
parser = argparse.ArgumentParser(version='0.7')
parser.add_argument('-d', action="store", dest="delay", type=int, default=3, help="refresh delay")
parser.add_argument('-n', action="store", dest="limit", type=int, default=0, help="number of iterations")
parser.add_argument('-b', action="store_true", dest="batch", default=False, help="batch mode, implies no color")
parser.add_argument('socket', help="path to the uWSGI stats socket")

options = parser.parse_args()
freq = options.delay
addr = options.socket
limit = options.limit
batch = options.batch
iteration = 0

need_reset = True

def game_over():
    global need_reset
    if need_reset:
        curses.endwin()

def exc_hook(type, value, tb):
    global need_reset
    need_reset = False
    curses.endwin()
    traceback.print_exception(type, value, tb)

sys.excepthook = exc_hook

sfamily = socket.AF_UNIX
addr_tuple = addr
if ':' in addr:
    sfamily = socket.AF_INET
    addr_parts = addr.split(':')
    addr_tuple = (addr_parts[0], int(addr_parts[1]))
elif not exists(addr):
    print '%s : No such file or directory' % addr
    sys.exit(1)

if not batch:
    screen = curses.initscr()
    curses.start_color()
    # busy
    curses.init_pair(1, curses.COLOR_GREEN, curses.COLOR_BLACK)
    # cheap
    curses.init_pair(2, curses.COLOR_MAGENTA, curses.COLOR_BLACK)
    # pause
    curses.init_pair(3, curses.COLOR_RED, curses.COLOR_BLACK)
    # sig
    curses.init_pair(4, curses.COLOR_YELLOW, curses.COLOR_BLACK)

    screen.timeout(freq*1000)
    atexit.register(game_over)

    curses.curs_set(0)
    screen.clear()

def reqcount(a, b):
    if a['requests'] > b['requests']:
        return -1
    if a['requests'] < b['requests']:
        return 1
    return 0

def calc_percent(tot, req):
    if tot == 0:
        return 0.0
    return (100 *float(req))/float(tot)

while True:

    js = ''
    iteration += 1

    try:
        s = socket.socket(sfamily, socket.SOCK_STREAM)
        s.connect( addr_tuple )

        while True:
            data = s.recv(4096)
            if len(data) < 1:
                break
            js += data
    except:
        raise Exception("unable to get uWSGI statistics")

    dd = json.loads(js)

    uversion = ''
    if 'version' in dd:
        uversion = '-' + dd['version']

    if not 'listen_queue' in dd:
        dd['listen_queue'] = 0 

    cwd = ""
    if 'cwd' in dd:
        cwd = "- cwd: %s" % dd['cwd']

    uid = ""
    if 'uid' in dd:
        uid = "- uid: %d" % dd['uid']

    gid = ""
    if 'gid' in dd:
        gid = "- gid: %d" % dd['gid']

    masterpid = ""
    if 'pid' in dd:
        masterpid = "- masterpid: %d" % dd['pid']

    node_line = "node: %s %s %s %s %s" % (socket.gethostname(), cwd, uid, gid, masterpid)
    if not batch:
        screen.addstr(1, 0, node_line)
    else:
        print node_line

    if 'vassals' in dd:
        vassal_header = "uwsgi%s - %s - emperor: %s - tyrant: %d" % (uversion, time.ctime(), dd['emperor'], dd['emperor_tyrant'])
        if not batch:
            screen.addstr(0, 0, vassal_header)
        else:
            print vassal_header
        vassal_spaces = max([len(v['id']) for v in dd['vassals']])
        vassal_legend = " VASSAL%s\tPID\t" % (' ' * (vassal_spaces-6))
        if not batch:
            screen.addstr(2, 0, vassal_legend, curses.A_REVERSE)
            pos = 3
        else:
            print vassal_legend
        for vassal in dd['vassals']:
            vassal_line = " %s\t%d" % (vassal['id'].ljust(vassal_spaces), vassal['pid'])
            if not batch:
                screen.addstr(pos, 0, vassal_line)
                pos += 1
            else:
                print vassal_line

    elif 'workers' in dd:
        tot = sum( [worker['requests'] for worker in dd['workers']] )
        tx = sum( [worker['tx'] for worker in dd['workers']] )
        header = "uwsgi%s - %s - req: %d - lq: %d - tx: %d" % (uversion, time.ctime(), tot, dd['listen_queue'], tx)
        legend = " WID\t%\tPID\tREQ\tEXC\tSIG\tSTATUS\tAVG\tRSS\tVSZ\tTX\tRunT\t"
        if not batch:
            screen.addstr(0, 0, header)
            screen.addstr(2, 0, legend, curses.A_REVERSE)
            pos = 3
        else:
            print header
            print legend

        dd['workers'].sort(reqcount)
        for worker in dd['workers']:
            sigs = 0
            wtx = worker['tx']
            if wtx > 9999999:
                wtx = "%sM" % str(wtx / (1024*1024))
            else:
                wtx = str(wtx)

            wrunt = worker['running_time']/1000
            if wrunt > 9999999:
                wrunt = "%sm" % str(wrunt / (1000*60))
            else:
                wrunt = str(wrunt)

            worker_line = " %d\t%.2f\t%d\t%d\t%d\t%d\t%s\t%dms\t%dM\t%dM\t%s\t%s" % (
                worker['id'], calc_percent(tot, worker['requests']), worker['pid'], worker['requests'], worker['exceptions'], sigs, worker['status'],
                    worker['avg_rt']/1000, worker['rss']/1024/1024, worker['vsz']/1024/1024,
                    wtx, wrunt
                )
            if not batch:
                color = curses.color_pair(0)
                if 'signals' in worker:
                    sigs = worker['signals']
                if worker['status'] == 'busy':
                    color = curses.color_pair(1)
                if worker['status'] == 'cheap':
                    color = curses.color_pair(2)
                if worker['status'] == 'pause':
                    color = curses.color_pair(3)
                if worker['status'].startswith('sig'):
                    color = curses.color_pair(4)
                screen.addstr(pos, 0, worker_line, color)
                pos += 1

                screen.refresh()
            else:
                print worker_line

    s.close()
    if batch : break
    if screen.getch() == ord('q') or iteration == limit:
        game_over()
        break
